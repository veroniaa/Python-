def dfs(graph, start, goal):
    visited = []
    stack = [[start]]

    while stack:
        path = stack.pop()
        node = path[-1]

        if node in visited:
            continue

        visited.append(node)

        if node == goal:
            return path

        for neighbor in graph.get(node, []):
            stack.append(path + [neighbor])

    return None


def bfs(graph, start, goal):
    visited = []
    queue = [[start]]

    while queue:
        path = queue.pop(0)
        node = path[-1]

        if node in visited:
            continue

        visited.append(node)

        if node == goal:
            return path

        for neighbor in graph.get(node, []):
            queue.append(path + [neighbor])

    return None


graph = {
    'S': ['A', 'D'],
    'A': ['B', 'C'],
    'B': ['G'],
    'C': ['D'],
    'D': ['G'],
    'G': []
}

print("DFS path from 'S' to 'G':", dfs(graph, 'S', 'G'))
print("BFS path from 'S' to 'G':", bfs(graph, 'S', 'G'))
