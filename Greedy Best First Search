def Greedy_Best_Search(graph, start, goal):
    visited = []
    queue = [[(start, 0)]]
    while queue:
        queue.sort(key=lambda path: path[-1][1])
        path = queue.pop(0)
        node = path[-1][0]
        if node in visited:
            continue
        visited.append(node)
        
        if node == goal:
            return path
        adjacent_nodes = graph.get(node, [])
        for (neighbor, cost) in adjacent_nodes:
            new_path = path.copy()
            new_path.append((neighbor, cost))
            queue.append(new_path)
    
    return []

if __name__ == "__main__":

    graph = {
        'A': [('B', 1), ('C', 3)],
        'B': [('D', 5), ('E', 2)],
        'C': [('F', 4)],
        'D': [('G', 6)],
        'E': [('G', 1)],
        'F': [('G', 2)],
        'G': []
    }
    
    start_node = 'A'
    goal_node = 'G'
    result = Greedy_Best_Search(graph, start_node, goal_node)
    
    if result:
        print("Path found:", " -> ".join([node for node, cost in result]))
    else:
        print("Not found")
